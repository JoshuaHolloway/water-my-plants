{"version":3,"sources":["shared/components/Navigation/MainNavigation.module.css","plants/components/PlantItem.module.css","shared/components/Navigation/NavLinks.module.css","user/pages/PublicHomePage.js","shared/hooks/http-hook.js","shared/context/auth-context.js","shared/components/UIElements/Backdrop.js","shared/components/UIElements/Modal.js","shared/components/FormElements/Button.js","plants/components/PlantItem.js","plants/components/PlantList.js","plants/pages/UsersPlants.js","user/pages/Auth.js","shared/components/Navigation/NavLinks.js","shared/components/Navigation/MainNavigation.js","shared/helpers/register_repeated_push.js","plants/pages/NewPlant.js","plants/pages/UpdatePlant.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","PublicHomePage","useHttpClient","useState","isLoading","setIsLoading","undefined","error","setError","activeHttpRequests","useRef","sendRequest","useCallback","url","a","method","body","headers","httpAbortCtrll","AbortController","current","push","fetch","signal","response","json","responseData","console","log","filter","reqCntrl","ok","Error","message","useEffect","forEach","abortCntrl","abort","clearError","AuthContext","createContext","isLoggedIn","userId","token","login","logout","Backdrop","props","ReactDOM","createPortal","className","onClick","document","getElementById","ModalOverlay","content","style","headerClass","header","onSubmit","event","preventDefault","contentClass","children","footerClass","footer","Modal","Fragment","show","onCancel","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","classNames","Button","href","size","inverse","danger","to","exact","type","disabled","PlaceItem","showDetails","setShowDetails","closeDetailsHandler","auth","useContext","onDeleteHandler","process","id","Authorization","onDelete","address","classes","species","nickname","h2oFrequency","border","backgroundColor","PlantList","items","length","map","plant","PlantItem","image","onDeletePlant","UsersPlants","loadedPlants","setLoadedPlants","fetchPlants","plants","deletedPlantId","prevPlants","Auth","name","setName","email","setEmail","password","setPassword","isLoginMode","setIsLoginMode","authSumbitHandler","e","JSON","stringify","reponseData","value","onChange","target","htmlFor","prevMode","NavLinks","MainNavigation","register_push_repeat","repeat_every_x_mins","publicVapidKey","navigator","serviceWorker","register","scope","pushManager","subscribe","userVisibleOnly","applicationServerKey","urlBase64ToUint8Array","subscription","Repeat_every_x_mins","String","base64String","base64","repeat","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","send","catch","err","NewPlant","history","useHistory","setNickname","setSpecies","setImage","h2oFreq","setH2oFreq","plantSubmitHandler","remind_in_x_mins","UpdatePlant","plantId","useParams","clear","fetchData","App","routes","setToken","setUserId","uid","localStorage","setItem","removeItem","storedData","parse","getItem","path","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.ef41511b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main-header\":\"MainNavigation_main-header__1cu1i\",\"nav\":\"MainNavigation_nav__2KID8\",\"logo\":\"MainNavigation_logo__E7VmX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"details-container\":\"PlantItem_details-container__2btML\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav-links\":\"NavLinks_nav-links__3w1gZ\",\"active\":\"NavLinks_active__lFgwa\"};","// ==============================================\n\nconst PublicHomePage = () => {\n  // --------------------------------------------\n\n  // --------------------------------------------\n\n  return (\n    <>\n      <h1>Water My Plants!</h1>\n    </>\n  );\n};\n\n// ==============================================\n\nexport default PublicHomePage;\n","import { useState, useCallback, useRef, useEffect } from 'react';\n\n// ==============================================\n\nexport const useHttpClient = () => {\n  // --------------------------------------------\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(undefined);\n\n  // -Store data across re-render cycles\n  // -We don't want to update the UI\n  //  when we change this specific data.\n  const activeHttpRequests = useRef([]);\n  // -We want to be able to cancel a request\n  //  if the user changes the page\n  //  to avoid errors related to this situation.\n\n  // --------------------------------------------\n\n  const sendRequest = useCallback(\n    async (url, method = 'GET', body = null, headers = {}) => {\n      // - - - - - - - - - - - - - - - - - - - -\n\n      setIsLoading(true);\n      const httpAbortCtrll = new AbortController();\n      activeHttpRequests.current.push(httpAbortCtrll);\n\n      // - - - - - - - - - - - - - - - - - - - -\n\n      try {\n        const response = await fetch(url, {\n          method,\n          body,\n          headers,\n          signal: httpAbortCtrll.signal,\n          // -Link the abort-controller to this request.\n          // -We can now user the abort-controller\n          //  to cancel the request.\n        });\n\n        const responseData = await response.json();\n        console.log('responseData: ', responseData);\n\n        // -We now know that the request completed.\n        // -We know that we will not need to cancel this request.\n        // -We can thus remove the request-controller\n        //  corresponding to this request.\n        activeHttpRequests.current = activeHttpRequests.current.filter(\n          (reqCntrl) => reqCntrl !== httpAbortCtrll\n        );\n\n        // -We want a 4xx or 5xx error to throw to the catch block\n        if (!response.ok) {\n          // -.ok property on the response object\n          //  is true if we have a 2xx or 3xx status code.\n          // -If we made it into this if-statement\n          //  then we got a 4xx or 5xx status code.\n          throw new Error(responseData.message);\n          // -NOTE: Cannot throw an error in async code!!!!\n        }\n\n        setIsLoading(false);\n        return responseData;\n        // - - - - - - - - - - - - - - - - - - - -\n      } catch (err) {\n        /* ... */\n        setError(err.message);\n        setIsLoading(false);\n        throw err;\n      }\n      // - - - - - - - - - - - - - - - - - - - -\n    },\n    []\n  ); // const sendRequest = useCallback(async () => {}, []);\n\n  // --------------------------------------------\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  // --------------------------------------------\n\n  // -Cleanup\n  useEffect(() => {\n    // -Run the returned function before each time\n    //  that this useEffect callback runs again (after initial render)\n    //  [that does not happen if the dependency list is empty,\n    //   because this callback only runs on the initial render, or course]\n    //  OR\n    //  when the component un-mounts (this is what we use it for here)\n    return () => {\n      // -Loop through the array of abort-controllers\n      activeHttpRequests.current.forEach((abortCntrl) => {\n        // -On every abort-controller call abort().\n        // -The request to which it is linked is aborted.\n        abortCntrl.abort();\n      });\n    };\n  }, []);\n\n  // --------------------------------------------\n\n  return { isLoading, error, sendRequest, clearError };\n\n  // --------------------------------------------\n};\n\n// ==============================================\n","import { createContext } from 'react';\n\n// ==============================================\n\nexport const AuthContext = createContext({\n  isLoggedIn: false,\n  userId: null,\n  token: null,\n  login: () => {},\n  logout: () => {},\n});\n\n// ==============================================\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './Backdrop.css';\n\nconst Backdrop = props => {\n  return ReactDOM.createPortal(\n    <div className=\"backdrop\" onClick={props.onClick}></div>,\n    document.getElementById('backdrop-hook')\n  );\n};\n\nexport default Backdrop;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CSSTransition } from 'react-transition-group';\n\nimport Backdrop from './Backdrop';\nimport './Modal.css';\n\n// ==============================================\n\nconst ModalOverlay = (props) => {\n  const content = (\n    <div className={`modal ${props.className}`} style={props.style}>\n      <header className={`modal__header ${props.headerClass}`}>\n        <h2>{props.header}</h2>\n      </header>\n      <form\n        onSubmit={\n          props.onSubmit ? props.onSubmit : (event) => event.preventDefault()\n        }\n      >\n        <div className={`modal__content ${props.contentClass}`}>\n          {props.children}\n        </div>\n        <footer className={`modal__footer ${props.footerClass}`}>\n          {props.footer}\n        </footer>\n      </form>\n    </div>\n  );\n  return ReactDOM.createPortal(content, document.getElementById('modal-hook'));\n};\n\n// ==============================================\n\nconst Modal = (props) => {\n  return (\n    <React.Fragment>\n      {props.show && <Backdrop onClick={props.onCancel} />}\n      <CSSTransition\n        in={props.show}\n        mountOnEnter\n        unmountOnExit\n        timeout={200}\n        classNames='modal'\n      >\n        <ModalOverlay {...props} />\n      </CSSTransition>\n    </React.Fragment>\n  );\n};\n\n// ==============================================\n\nexport default Modal;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Button.css';\n\nconst Button = props => {\n  if (props.href) {\n    return (\n      <a\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'}`}\n        href={props.href}\n      >\n        {props.children}\n      </a>\n    );\n  }\n  if (props.to) {\n    return (\n      <Link\n        to={props.to}\n        exact={props.exact}\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'}`}\n      >\n        {props.children}\n      </Link>\n    );\n  }\n  return (\n    <button\n      className={`button button--${props.size || 'default'} ${props.inverse &&\n        'button--inverse'} ${props.danger && 'button--danger'}`}\n      type={props.type}\n      onClick={props.onClick}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import { useState, useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\n\nimport Modal from '../../shared/components/UIElements/Modal';\nimport Button from '../../shared/components/FormElements/Button';\n\nimport classes from './PlantItem.module.css';\n\n// ==============================================\n\nconst PlaceItem = (props) => {\n  // --------------------------------------------\n\n  const [showDetails, setShowDetails] = useState(false);\n\n  const openDetailsHandler = () => setShowDetails(true);\n\n  const closeDetailsHandler = () => setShowDetails(false);\n  // --------------------------------------------\n\n  // -Set up listener to auth context\n  const auth = useContext(AuthContext);\n\n  // --------------------------------------------\n\n  // const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const { sendRequest } = useHttpClient();\n\n  // --------------------------------------------\n\n  const onDeleteHandler = async () => {\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND}/plants/${props.id}`,\n        'DELETE',\n        null,\n        {\n          Authorization: `Bearer ${auth.token}`,\n        }\n      );\n      props.onDelete(props.id);\n    } catch (err) {}\n  };\n\n  // --------------------------------------------\n\n  return (\n    <>\n      <Modal\n        show={showDetails}\n        onCancel={closeDetailsHandler}\n        header={props.address}\n        contentClass='place-item__modal-content'\n        footerClass='place-item__modal-actions'\n        footer={<Button onClick={closeDetailsHandler}>CLOSE</Button>}\n      >\n        <div className={classes['details-container']}>\n          <p>Species: {props.species}</p>\n          <p>Nickname: {props.nickname}</p>\n          <p>H2O-Frequency: {props.h2oFrequency}</p>\n        </div>\n      </Modal>\n\n      <li>\n        <div style={{ border: 'solid black 1px' }}>\n          <p>\n            Nickname:{' '}\n            <span style={{ backgroundColor: 'lightgrey' }}>\n              {props.nickname}\n            </span>\n          </p>\n\n          <p>\n            Species:{' '}\n            <span style={{ backgroundColor: 'lightgrey' }}>\n              {props.species}\n            </span>\n          </p>\n\n          <p>\n            H2O-Frequency :{' '}\n            <span style={{ backgroundColor: 'lightgrey' }}>\n              {props.h2oFrequency}\n            </span>\n          </p>\n\n          <button onClick={onDeleteHandler}>DELETE</button>\n          <button>\n            <NavLink to={`/plants/${props.id}`}>UPDATE</NavLink>\n          </button>\n          <Button inverse onClick={openDetailsHandler}>\n            VIEW PLANT DETAILS\n          </Button>\n        </div>\n      </li>\n    </>\n  );\n};\n\n// ==============================================\n\nexport default PlaceItem;\n","import PlantItem from './PlantItem';\n// import './PlantList.css';\n\n// ==============================================\n\nconst PlantList = (props) => {\n  if (props.items.length === 0) {\n    return <h2>No plants found. Maybe create one?</h2>;\n  }\n\n  return (\n    <ul>\n      {props.items.map((plant) => {\n        return (\n          <PlantItem\n            key={plant.id}\n            id={plant.id}\n            image={plant.image}\n            nickname={plant.nickname} // title={place.title}\n            species={plant.species} //description={place.description}\n            h2oFrequency={plant.h2oFrequency} //address={place.address}\n            // creatorId={place.creator}\n            // coordinates={place.location}\n            // onDelete={props.onDeletePlace}\n            onDelete={props.onDeletePlant}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n\n// ==============================================\n\nexport default PlantList;\n","import { useEffect, useState, useContext } from 'react';\n// import { useParams } from 'react-router-dom';\n\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\n\nimport PlantList from '../components/PlantList';\n\n// ==============================================\n\nconst UsersPlants = () => {\n  // --------------------------------------------\n\n  // -Set up listener to auth context\n  const auth = useContext(AuthContext);\n\n  // --------------------------------------------\n\n  const [loadedPlants, setLoadedPlants] = useState();\n\n  // --------------------------------------------\n\n  const { isLoading, error, sendRequest } = useHttpClient();\n\n  // --------------------------------------------\n\n  // const userId = useParams().userId;\n  // const loadedPlants = DUMMY_PLANTS.filter((plant) => plant.creator === userId);\n\n  // --------------------------------------------\n\n  useEffect(() => {\n    if (auth.userId) {\n      const fetchPlants = async () => {\n        try {\n          const responseData = await sendRequest(\n            `${process.env.REACT_APP_BACKEND}/plants/user/${auth.userId}`,\n            'GET', // method\n            null, // body\n            {\n              Authorization: `Bearer ${auth.token}`,\n            } // headers\n          );\n\n          setLoadedPlants(responseData.plants);\n        } catch (err) {\n          console.log('(UsersPlants.js) err: ', err);\n        }\n      };\n      fetchPlants();\n    }\n  }, [auth.userId, auth.token, sendRequest]);\n\n  // --------------------------------------------\n\n  const plantDeletedHandler = (deletedPlantId) => {\n    // -Pass function to useState setter\n    //  in order to update state based\n    //  on previous value of state (passed in as arg)\n    setLoadedPlants((prevPlants) =>\n      prevPlants.filter((plant) => plant.id !== deletedPlantId)\n    );\n  };\n\n  // --------------------------------------------\n\n  return (\n    <>\n      {isLoading && <h5>Loading...</h5>}\n      {error && <h5>ERROR!</h5>}\n      {!isLoading && loadedPlants && (\n        <PlantList items={loadedPlants} onDeletePlant={plantDeletedHandler} />\n      )}\n    </>\n  );\n};\n\n// ==============================================\n\nexport default UsersPlants;\n","import { useState, useEffect, useContext } from 'react';\n\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\n\n// ==============================================\n\nconst Auth = () => {\n  // --------------------------------------------\n\n  const auth = useContext(AuthContext);\n\n  // --------------------------------------------\n\n  // const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const { sendRequest } = useHttpClient();\n\n  // --------------------------------------------\n\n  const [name, setName] = useState('josh');\n  const [email, setEmail] = useState('josh@josh.com');\n  const [password, setPassword] = useState('password');\n\n  useEffect(() => console.log('name: ', name), [name]);\n  useEffect(() => console.log('email: ', email), [email]);\n  useEffect(() => console.log('password: ', password), [password]);\n\n  const onNameChangeHandler = (e) => setName(e.target.value);\n  const onEmailChangeHandler = (e) => setEmail(e.target.value);\n  const onPasswordChangeHandler = (e) => setPassword(e.target.value);\n\n  // --------------------------------------------\n\n  const [isLoginMode, setIsLoginMode] = useState(true);\n\n  const switchModeHandler = () => {\n    // -Pass function into state handler when state change is based on prev-state value.\n    setIsLoginMode((prevMode) => !prevMode);\n  };\n\n  // --------------------------------------------\n\n  const authSumbitHandler = async (e) => {\n    e.preventDefault();\n    console.log({ name, email, password });\n\n    if (isLoginMode) {\n      // log-in-mode\n      // log-in-mode\n      // log-in-mode\n\n      try {\n        const reponseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND}/users/login`,\n          'POST',\n          JSON.stringify({\n            email: email,\n            password: password,\n          }),\n          { 'Content-Type': 'application/json' }\n        );\n\n        // -Successful login\n        auth.login(reponseData.userId, reponseData.token);\n      } catch (err) {\n        // -Failed login\n        console.log('failed login:  err: ', err);\n      }\n    } else {\n      // sign-in-mode\n      // sign-in-mode\n      // sign-in-mode\n\n      try {\n        const reponseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND}/users/signup`,\n          'POST',\n          JSON.stringify({\n            name: name,\n            email: email,\n            password: password,\n          }),\n          { 'Content-Type': 'application/json' }\n        );\n\n        // -Successful login\n        auth.login(reponseData.userId);\n      } catch (err) {\n        // -Failed login\n        console.log('failed login:  err: ', err);\n      }\n    }\n  };\n\n  // --------------------------------------------\n\n  return (\n    <>\n      <form onSubmit={authSumbitHandler}>\n        <h2>Login Required</h2>\n\n        <hr />\n\n        {!isLoginMode && (\n          <label>\n            name:\n            <input\n              type='text'\n              id='name'\n              value={name}\n              onChange={onNameChangeHandler}\n            />\n          </label>\n        )}\n\n        <br />\n\n        <label htmlFor='email'>\n          email:{' '}\n          <input\n            type='email'\n            id='email'\n            value={email}\n            onChange={onEmailChangeHandler}\n          />\n        </label>\n\n        <br />\n\n        <label htmlFor='password'>\n          password:{' '}\n          <input\n            type='password'\n            id='password'\n            value={password}\n            onChange={onPasswordChangeHandler}\n          />\n        </label>\n\n        <br />\n\n        <button type='submit'>{isLoginMode ? 'LOGIN' : 'SIGNUP'}</button>\n      </form>\n\n      <button type='submit' onClick={switchModeHandler}>\n        {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n      </button>\n    </>\n  );\n};\n\n// ==============================================\n\nexport default Auth;\n","import { useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport { AuthContext } from '../../context/auth-context';\nimport classes from './NavLinks.module.css';\n\n// ==============================================\n\nconst NavLinks = (props) => {\n  // --------------------------------------------\n\n  const auth = useContext(AuthContext);\n\n  console.log('NavLinks.js -- auth.userId: ', auth.userId);\n\n  // --------------------------------------------\n\n  return (\n    <ul className={classes['nav-links']}>\n      {auth.isLoggedIn && (\n        <li>\n          <NavLink to={`/${auth.userId}/plants`}>MY PLANTS</NavLink>\n        </li>\n      )}\n\n      {auth.isLoggedIn && (\n        <li>\n          <NavLink to={'/plants/new'}>ADD PLANT</NavLink>\n        </li>\n      )}\n\n      {auth.isLoggedIn && (\n        <li>\n          <button\n            onClick={() => {\n              auth.logout();\n            }}\n          >\n            LOGOUT\n          </button>\n        </li>\n      )}\n\n      {!auth.isLoggedIn && (\n        <li>\n          <NavLink to={'/auth'}>Log In</NavLink>\n        </li>\n      )}\n    </ul>\n  );\n\n  // --------------------------------------------\n};\n\n// ==============================================\n\nexport default NavLinks;\n","import { Link } from 'react-router-dom';\n\nimport NavLinks from './NavLinks';\n\nimport classes from './MainNavigation.module.css';\n\n// ==============================================\n\nconst MainNavigation = (props) => {\n  // --------------------------------------------\n\n  return (\n    <header className={classes['main-header']}>\n      <nav className={classes['nav']}>\n        <NavLinks />\n      </nav>\n\n      <h1 className={classes['logo']}>\n        <Link to='/'>Water Plants</Link>\n      </h1>\n    </header>\n  );\n\n  // --------------------------------------------\n};\n\n// ==============================================\n\nexport default MainNavigation;\n","// ==============================================\n\nconst register_push_repeat = (repeat_every_x_mins) => {\n  // --------------------------------------------\n\n  const publicVapidKey =\n    'BJthRQ5myDgc7OSXzPCMftGw-n16F7zQBEN7EUD6XxcfTTvrLGWSIG7y_JxiWtVlCFua0S8MTB5rPziBqNx1qIo';\n\n  // --------------------------------------------\n\n  // Check for service worker\n  if ('serviceWorker' in navigator) {\n    send().catch((err) => console.error('serviceWorker error: ', err));\n  }\n\n  // --------------------------------------------\n\n  // Register SW, Register Push, Send Push\n  async function send() {\n    // Register Service Worker\n    console.log('Registering service worker...');\n    const register = await navigator.serviceWorker.register('/worker.js', {\n      scope: '/',\n    });\n    console.log('Service Worker Registered...');\n\n    // Register Push\n    console.log('Registering Push...');\n    const subscription = await register.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(publicVapidKey),\n    });\n    console.log('Push Registered...');\n\n    // Send Push Notification\n    console.log('Sending Push...');\n\n    await fetch('http://localhost:5000/api/push/', {\n      method: 'POST',\n      body: JSON.stringify(subscription),\n      headers: {\n        'content-type': 'application/json',\n        Repeat_every_x_mins: String(repeat_every_x_mins),\n        // Push_reg_min: String(reg_min),\n      },\n    });\n\n    console.log('Push Sent...');\n  }\n\n  // --------------------------------------------\n\n  function urlBase64ToUint8Array(base64String) {\n    const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n    const base64 = (base64String + padding)\n      .replace(/\\-/g, '+')\n      .replace(/_/g, '/');\n\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n\n    for (let i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n  }\n\n  // --------------------------------------------\n}; // do_push()\n\n// ==============================================\n\nexport default register_push_repeat;\n","import { useState, useEffect, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\n\n// import register_push from '../../shared/helpers/do_push';\nimport register_push_repeat from '../../shared/helpers/register_repeated_push';\n\n// ==============================================\n\nconst NewPlant = () => {\n  // --------------------------------------------\n\n  // -Set up listener to auth context\n  const auth = useContext(AuthContext);\n\n  // --------------------------------------------\n\n  // -Prepare page redirect\n  const history = useHistory();\n\n  // --------------------------------------------\n\n  // const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const { sendRequest } = useHttpClient();\n\n  // -Plant model (expected shape of data on backend)\n  // const plantSchema = new Schema({\n  //   nickname: { type: String, required: true },\n  //   species: { type: String, required: true },\n  //   image: { type: String, required: true },\n  //   // h2oFrequency: { type: String, required: true }, // number?\n  //   // creator: { type: String, required: true },\n  //   creator: { type: mongoose.Types.ObjectId, required: true, ref: 'User' },\n  // });\n\n  const [nickname, setNickname] = useState('');\n  const [species, setSpecies] = useState('');\n  const [image, setImage] = useState('');\n  const [h2oFreq, setH2oFreq] = useState('');\n  // const [creator, setCreator] = useState('');\n\n  useEffect(() => {\n    if (nickname) {\n      console.log('nickname: ', nickname);\n    }\n  }, [nickname]);\n  useEffect(() => {\n    if (species) {\n      console.log('species: ', species);\n    }\n  }, [species]);\n  useEffect(() => {\n    if (image) {\n      console.log('image: ', image);\n    }\n  }, [image]);\n  useEffect(() => {\n    if (h2oFreq) {\n      console.log('h2oFreq: ', h2oFreq);\n    }\n  }, [h2oFreq]);\n  // useEffect(() => console.log('creator: ', creator), [creator]);\n\n  const onNicknameChangeHandler = (e) => setNickname(e.target.value);\n  const onSpeciesChangeHandler = (e) => setSpecies(e.target.value);\n  const onImageChangeHandler = (e) => setImage(e.target.value);\n  const onH2oFreqChangeHandler = (e) => setH2oFreq(e.target.value);\n  // const onCreatorChangeHandler = (e) => setCreator(e.target.value);\n\n  // --------------------------------------------\n\n  const plantSubmitHandler = async (event) => {\n    event.preventDefault();\n\n    const plant = {\n      nickname, //: { type: String, required: true },\n      species, //: { type: String, required: true },\n      image, //: { type: String, required: true },\n      h2oFrequency: h2oFreq, //: { type: String, required: true }, // number?\n      // creator: auth.userId -- NOT NEEDED because we grab the user id from the decoded JWT on the backend after storing in the the checkAuth middleware\n    };\n\n    console.log('plant form data: ', plant); // send this to the backend!\n\n    try {\n      const responseData = await sendRequest(\n        `${process.env.REACT_APP_BACKEND}/plants/add`,\n        'POST',\n        JSON.stringify(plant),\n        {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${auth.token}`,\n        }\n      );\n\n      console.log(\n        'responseData - NewPlant.js - plantSubmitHandler() : ',\n        responseData\n      );\n\n      const remind_in_x_mins = 60 / h2oFreq;\n      console.log(`Need to water ${h2oFreq}-times per hour.`);\n      console.log(`Remind every ${remind_in_x_mins}-minutes.`);\n\n      // -Plant has been added successfully.\n      // -Register push notifications according to\n      //  specified h2o-frequency:\n      // register_push(10, 4);\n      register_push_repeat(remind_in_x_mins);\n\n      // -Redirect the user to homepage\n      history.push('/');\n    } catch (err) {\n      console.log('err: ', err);\n    }\n  };\n\n  // --------------------------------------------\n\n  return (\n    <form onSubmit={plantSubmitHandler}>\n      <label htmlFor='nickname'>\n        Nickname:\n        <input\n          type='text'\n          id='nickname'\n          value={nickname}\n          onChange={onNicknameChangeHandler}\n        />\n      </label>\n      <br />\n      <label htmlFor='species'>\n        Species:\n        <input\n          type='text'\n          id='species'\n          value={species}\n          onChange={onSpeciesChangeHandler}\n        />\n      </label>\n      <br />\n      <label htmlFor='image'>\n        Image:\n        <input\n          type='text'\n          id='image'\n          value={image}\n          onChange={onImageChangeHandler}\n        />\n      </label>\n      <br />\n      <label htmlFor='h2oFreq'>\n        h2oFrequency:\n        <input\n          type='text'\n          id='h2oFreq'\n          value={h2oFreq}\n          onChange={onH2oFreqChangeHandler}\n        />\n      </label>\n      <br />\n      <button type='submit'>Submit</button>\n    </form>\n  );\n\n  // --------------------------------------------\n};\n\n// ==============================================\n\nexport default NewPlant;\n","import { useState, useEffect, useContext } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\n\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\n\n// ==============================================\n\nconst UpdatePlant = () => {\n  // --------------------------------------------\n\n  // /plants/:pid'\n  const plantId = useParams().plantId;\n  console.log('plantId: ', plantId);\n\n  // const [plantId, setPlantId] = useState('');\n  // useEffect(() => {\n  //   console.log('useParams: ', useParams);\n  //   const x = useParams().plantId;\n  //   setPlantId(x);\n  // }, []);\n\n  // useEffect(() => {\n  //   console.log('plantId: ', plantId);\n  // }, [plantId]);\n\n  // --------------------------------------------\n\n  // -Set up listener to auth context\n  const auth = useContext(AuthContext);\n\n  // --------------------------------------------\n\n  // -Prepare page redirect\n  const history = useHistory();\n\n  // --------------------------------------------\n\n  // const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const { sendRequest } = useHttpClient();\n\n  // --------------------------------------------\n\n  // const [loadedPlant, setLoadedPlant] = useState();\n\n  // --------------------------------------------\n\n  const [nickname, setNickname] = useState('');\n  const [species, setSpecies] = useState('');\n\n  useEffect(() => console.log('nickname: ', nickname), [nickname]);\n  useEffect(() => console.log('species: ', species), [species]);\n\n  const onNicknameChangeHandler = (e) => setNickname(e.target.value);\n  const onSpeciesChangeHandler = (e) => setSpecies(e.target.value);\n\n  // --------------------------------------------\n\n  // -Send request when page loads to load latest plant data\n  useEffect(() => {\n    console.clear();\n    const fetchData = async () => {\n      console.log('async fetchData()');\n\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND}/plants/${plantId}`,\n          'GET',\n          null,\n          {\n            Authorization: `Bearer ${auth.token}`,\n          }\n        );\n\n        setNickname(responseData.plant.nickname);\n        setSpecies(responseData.plant.species);\n      } catch (err) {\n        console.log('error sending request to api/plants/:plantId');\n      }\n    };\n    fetchData();\n  }, [auth.token, plantId, sendRequest]);\n\n  // --------------------------------------------\n\n  const plantSubmitHandler = async (event) => {\n    event.preventDefault();\n\n    const plant = {\n      nickname, //: { type: String, required: true },\n      species, //: { type: String, required: true },\n    };\n\n    console.log('plant form data: ', plant); // send this to the backend!\n\n    try {\n      const responseData = await sendRequest(\n        `${process.env.REACT_APP_BACKEND}/plants/${plantId}`,\n        'PATCH',\n        JSON.stringify(plant),\n        {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${auth.token}`,\n        }\n      );\n\n      console.log(\n        'responseData - UpdatePlant.js - plantSubmitHandler() : ',\n        responseData\n      );\n\n      // -Redirect the user to homepage\n      // history.push(`/:userId/plants`);\n      history.push(`/${auth.userId}/plants`);\n    } catch (err) {\n      console.log('err: ', err);\n    }\n  };\n\n  // --------------------------------------------\n\n  return (\n    <form onSubmit={plantSubmitHandler}>\n      <h5>Update Plant</h5>\n\n      <label htmlFor='nickname'>\n        Nickname:\n        <input\n          type='text'\n          id='nickname'\n          value={nickname}\n          onChange={onNicknameChangeHandler}\n        />\n      </label>\n\n      <br />\n\n      <label htmlFor='species'>\n        Species:\n        <input\n          type='text'\n          id='species'\n          value={species}\n          onChange={onSpeciesChangeHandler}\n        />\n      </label>\n\n      <br />\n\n      <button type='submit'>Submit</button>\n    </form>\n  );\n\n  // --------------------------------------------\n};\n\n// ==============================================\n\nexport default UpdatePlant;\n","import { useState, useEffect, useCallback } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\nimport Transition from 'react-transition-group/Transition';\n\nimport PublicHomePage from './user/pages/PublicHomePage';\nimport UsersPlants from './plants/pages/UsersPlants';\nimport Auth from './user/pages/Auth';\nimport MainNavigation from './shared/components/Navigation/MainNavigation';\nimport NewPlant from './plants/pages/NewPlant';\nimport UpdatePlant from './plants/pages/UpdatePlant';\n\nimport { AuthContext } from './shared/context/auth-context';\n\n// ==============================================\n\nconst App = () => {\n  // --------------------------------------------\n\n  const [token, setToken] = useState(false); // null ?  or undefined ?\n  const [userId, setUserId] = useState(false);\n\n  // --------------------------------------------\n\n  // -Only create this function on initial\n  //  execution of component function\n  const login = useCallback((uid, token) => {\n    console.log('App.js -- login()');\n    setToken(token);\n    setUserId(uid);\n    localStorage.setItem(\n      'userData',\n      JSON.stringify({ userId: uid, token: token })\n    );\n  }, []);\n\n  const logout = useCallback(() => {\n    setToken(null);\n    setUserId(null);\n    localStorage.removeItem('userData');\n  }, []);\n\n  // --------------------------------------------\n\n  // -useEffect will run AFTER the component mounts\n  // -This is AFTER the render cycle.\n  useEffect(() => {\n    // -Auto-log-in the user if the JWT is in local-storage.\n    const storedData = JSON.parse(localStorage.getItem('userData'));\n    if (storedData && storedData.token) {\n      // -If we have the JWT, then log user in:\n      login(storedData.userId, storedData.token);\n    }\n  }, [login]);\n\n  // --------------------------------------------\n\n  let routes;\n\n  if (token) {\n    routes = (\n      <Switch>\n        <Route path='/' exact>\n          {/* Logged-in user homepage */}\n          <UsersPlants />\n        </Route>\n\n        <Route path='/:userId/plants' exact>\n          <UsersPlants />\n        </Route>\n\n        <Route path='/plants/new' exact>\n          <NewPlant />\n        </Route>\n\n        <Route path='/plants/:plantId'>\n          <UpdatePlant />\n        </Route>\n        <Redirect to='/' />\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route path='/' exact>\n          <PublicHomePage />\n        </Route>\n\n        <Route path='/auth'>\n          <Auth />\n        </Route>\n\n        <Redirect to='/auth' />\n      </Switch>\n    );\n  }\n\n  // --------------------------------------------\n\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [showBlock, setShowBlock] = useState(false);\n\n  // --------------------------------------------\n\n  return (\n    // -bind the value we manage with our context\n    //  (which we initialized in createContext() [auth-context.js])\n    //  to a new value (the object: {isLoggedIn, login, logout})\n    // -any time a state changes in our store\n    //  the components that subscribe\n    //  to said store re-render.\n    <AuthContext.Provider\n      value={{ isLoggedIn: !!token, token, userId, login, logout }}\n    >\n      <Router>\n        <MainNavigation />\n\n        {/* <button onClick={() => setShowBlock((prevState) => !prevState)}>\n          toggle\n        </button> */}\n\n        {/* <Transition in={showBlock} timeout={100}>\n          {(state) => (\n            // ENTERING, ENTERED, EXITING, EXITED\n\n            <>\n              <p>{state}</p>\n              <p>{state === 'exited' ? 0 : 1}</p>\n              <div\n                style={{\n                  backgroundColor: 'red',\n                  width: 100,\n                  height: 100,\n                  transition: 'opacity 1s ease-out',\n                  opacity: state === 'exited' ? 0 : 1,\n                }}\n              ></div>\n            </>\n          )}\n        </Transition> */}\n\n        <main>{routes}</main>\n      </Router>\n    </AuthContext.Provider>\n  );\n\n  // --------------------------------------------\n};\n\n// ==============================================\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}